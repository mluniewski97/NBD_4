1.
MATCH path= ShortestPath((begin:town {name: "Darjeeling"})-[*]->(dest:peak {name: "Sandakphu"})) RETURN path
2.
MATCH path= ShortestPath((begin:town {name: "Darjeeling"})-[*]->(dest:peak {name: "Sandakphu"})) WHERE ALL (cond IN RELATIONSHIPS(path) WHERE cond.winter="true") RETURN path
3.
MATCH paths=(begin:town {name:"Darjeeling"})-[r*]->(dest:peak {name:"Sandakphu"})
With paths, reduce(distance = 0, cond IN relationships(paths)| distance + cond.distance) AS distance
return paths, distance
order by distance
4.
MATCH (airP:Airport)<-[d:ORIGIN]-(flights:Flight)
WITH airP, count(flights) as flightsNumber
RETURN airP, flightsNumber
order by flightsNumber
5.
MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport)
WHERE REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) < 3000
RETURN p
7.
MATCH (begin:Airport { name:'LAX'}), (dest:Airport {name:"DAY"}) WITH begin,dest MATCH path = ShortestPath((begin)-[cheapestFlight:CHEAPEST_FLIGHT*]-(dest)) UNWIND  cheapestFlight as flights RETURN min(flights.price)
6.
MATCH path = (laxport:Airport {name:"LAX" })<-[:ORIGIN]-(f:Flight)-[*1..8]-(dayport:Airport{name: 'DAY' })
WITH path, REDUCE(acc = 0, n IN [x IN NODES(path) WHERE 'Flight' IN LABELS(x)] | acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) as price
RETURN path, price
ORDER BY price
9.
MATCH (airport: Airport)-[:ORIGIN | :DESTINATION]-(flight: Flight) 
RETURN flight.airline,
COUNT(DISTINCT airport) AS Count
ORDER BY Count
10.
MATCH p = (a1:Airport)<-[r1:ORIGIN]-(f1:Flight)-[r2:DESTINATION]->(a2:Airport)<-[r3:ORIGIN]-(f2:Flight)-[r4:DESTINATION]->(a3:Airport)
WHERE not(a1=a2) AND not(a1=a3) AND not(a2=a3)
WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket {class: 'economy'}) | ticket.price][0]
  ) as price
RETURN p, price
ORDER BY price asc LIMIT 1
